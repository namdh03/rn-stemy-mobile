schema {
  query: Query
  mutation: Mutation
}

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AccessTokenResponse {
  access_token: String!
}

type Cart {
  id: ID!
  product: Product!
  quantity: Int!
  user: User!
}

type Feedback {
  comment: String!
  id: ID!
  orderItem: OrderItem!
  product: Product!
  rating: Int!
  user: User!
}

"""
File upload scalar type
"""
scalar File

type Mutation {
  addToCart(productId: Float!, quantity: Float!): Cart!
  createProduct(images: [File!]!, input: ProductInput!, lab: File!): Product!
  deleteCart(productId: Float!): String!
  getTokenResetPassword(OTPCode: String!, email: String!): String!
  login(email: String!, password: String!): AccessTokenResponse!
  loginWithGoogle(code: String!): AccessTokenResponse!
  register(email: String!, fullName: String!, password: String!, phone: String!): AccessTokenResponse!
  resetPassword(password: String!, token: String!): String!
  sendResetPasswordOTP(email: String!): String!
  updateCart(productId: Float!, quantity: Float!): Cart!
}

type Order {
  id: ID!
}

type OrderItem {
  id: ID!
  order: Order!
  product: Product!
  quantity: Int!
  unitPrice: Int!
}

type Product {
  category: ProductCategory!
  description: String!
  feedbacks: [Feedback!]!
  id: ID!
  images: [ProductImage!]!
  name: String!
  price: Float!
}

type ProductCategory {
  id: ID!
  name: String!
}

type ProductImage {
  id: ID!
  url: String!
}

input ProductInput {
  categoryId: Int!
  description: String!
  name: String!
  price: Int!
}

type ProductsWithPaginationResponse {
  items: [Product!]!
  pageInfo: e!
}

type Query {
  carts: [Cart!]
  countCart: Float!
  me: User!
  products(
    currentItem: Int! = 9
    currentPage: Int! = 1
    order: SortOrder! = ASC
    sort: String! = "id"
  ): ProductsWithPaginationResponse!
  user(id: Int!): User
  users: [User!]!
}

enum Role {
  ADMIN
  CUSTOMER
  MANAGER
  STAFF
}

enum SortOrder {
  ASC
  DESC
}

type User {
  email: String
  fullName: String
  id: ID!
  phone: String
  role: Role!
  status: UserStatus!
}

enum UserStatus {
  ACTIVE
  BAN
}

type e {
  currentItem: Int!
  currentPage: Int!
  totalItem: Int!
  totalPage: Int!
}
